[build-system]
requires = ["pdm-pep517"]
build-backend = "pdm.pep517.api"

[project]
name = "{{ python_package_distribution_name }}"
description = "{{ project_description }}"
authors = [{name = "{{ author_fullname }}", email = "{{ author_email }}"}]
license = "
    {%- if copyright_license == "Academic Free License v3.0" -%}
    AFL-3.0
    {%- elif copyright_license == "Apache License 2.0" -%}
    Apache-2.0
    {%- elif copyright_license == "Artistic License 2.0" -%}
    Artistic-2.0
    {%- elif copyright_license == "BSD 2-Clause \"Simplified\" License" -%}
    BSD-2-Clause
    {%- elif copyright_license == "BSD 3-Clause Clear License" -%}
    BSD-3-Clause-Clear
    {%- elif copyright_license == "BSD 3-Clause \"New\" or \"Revised\" License" -%}
    BSD-3-Clause
    {%- elif copyright_license == "Boost Software License 1.0" -%}
    BSL-1.0
    {%- elif copyright_license == "Creative Commons Attribution 4.0" -%}
    CC-BY-4.0
    {%- elif copyright_license == "Creative Commons Attribution Share Alike 4.0" -%}
    CC-BY-SA-4.0
    {%- elif copyright_license == "Creative Commons Zero v1.0 Universal" -%}
    CC0-1.0
    {%- elif copyright_license == "Do What The F*ck You Want To Public License" -%}
    WTFPL
    {%- elif copyright_license == "Educational Community License v2.0" -%}
    ECL-2.0
    {%- elif copyright_license == "Eclipse Public License 1.0" -%}
    EPL-1.0
    {%- elif copyright_license == "Eclipse Public License 2.0" -%}
    EPL-2.0
    {%- elif copyright_license == "European Union Public License 1.1" -%}
    EUPL-1.1
    {%- elif copyright_license == "European Union Public License 1.2" -%}
    EUPL-1.2
    {%- elif copyright_license == "GNU Affero General Public License v3.0" -%}
    AGPL-3.0
    {%- elif copyright_license == "GNU General Public License v2.0" -%}
    GPL-2.0
    {%- elif copyright_license == "GNU General Public License v3.0" -%}
    GPL-3.0
    {%- elif copyright_license == "GNU Lesser General Public License v2.1" -%}
    LGPL-2.1
    {%- elif copyright_license == "GNU Lesser General Public License v3.0" -%}
    LGPL-3.0
    {%- elif copyright_license == "ISC License" -%}
    ISC
    {%- elif copyright_license == "LaTeX Project Public License v1.3c" -%}
    LPPL-1.3c
    {%- elif copyright_license == "MIT License" -%}
    MIT
    {%- elif copyright_license == "Mozilla Public License 2.0" -%}
    MPL-2.0
    {%- elif copyright_license == "Microsoft Public License" -%}
    MS-PL
    {%- elif copyright_license == "Microsoft Reciprocal License" -%}
    MS-RL
    {%- elif copyright_license == "University of Illinois/NCSA Open Source License" -%}
    NCSA
    {%- elif copyright_license == "SIL Open Font License 1.1" -%}
    OFL-1.1
    {%- elif copyright_license == "Open Software License 3.0" -%}
    OSL-3.0
    {%- elif copyright_license == "PostgreSQL License" -%}
    PostgreSQL
    {%- elif copyright_license == "The Unlicense" -%}
    Unlicense
    {%- elif copyright_license == "zlib License" -%}
    Zlib
    {%- endif %}"
readme = "README.md"
requires-python = ">=3.8, <3.12"
keywords = []
dynamic = ["version"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Documentation",
    "Topic :: Software Development",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dependencies = []

[project.urls]
Homepage = "https://{{ repository_namespace }}.github.io/{{ repository_name }}"
Documentation = "https://{{ repository_namespace }}.github.io/{{ repository_name }}"
Changelog = "https://{{ repository_namespace }}.github.io/{{ repository_name }}/changelog"
Repository = "https://github/{{ repository_namespace }}/{{ repository_name }}"
Issues = "https://github/{{ repository_namespace }}/{{ repository_name }}/issues"
Discussions = "https://github/{{ repository_namespace }}/{{ repository_name }}/discussions"
Gitter = "https://gitter.im/{{ repository_name }}/community"
Funding = "https://github/sponsors/{{ repository_namespace }}"

[tool.pdm]
version = {source = "scm"}
build = {package-dir = "src", editable-backend = "editables"}

[tool.pdm.scripts]
clean = {shell = """rm -rf .mypy_cache .pytest_cache tests/.pytest_cache build dist \
htmlcov pip-wheel-metadata site __pycache__ \
&& find . -type d -name __pycache__ | xargs rm -rf \
&& find . -name '*.rej'  -delete \
&& find . -name '.coverage*'  -delete"""}
docs = "nox --error-on-external-run -R -s docs -- {args:serve}"
formatting = "nox --error-on-external-run -R -s formatting -- {args:all}"
checks = "nox --error-on-external-run -R -s checks -- {args:all}"
tests = "nox --error-on-external-run -R -s tests"
changelog = "nox --error-on-external-run -R -s changelog"
release = "nox --error-on-external-run -R -s release -- {args}"

[tool.pdm.dev-dependencies]
maintenance = [
    "nox>=2022.8.7",
]
docs = [
    "mkdocs>=1.3",
    "mkdocs-coverage>=0.2",
    "mkdocs-gen-files>=0.3",
    "mkdocs-literate-nav>=0.4",
    "mkdocs-material>=7.3",
    "mkdocs-gallery>=0.7.6",
    "mkdocs-section-index>=0.3",
    "mkdocstrings[python]>=0.20",
    "markdown-callouts>=0.2",
    "markdown-exec>=0.5",
    'pandas>=1.5.0',
]
formatting = [
    "black>=21.10b0",
    "docformatter>=1.5.1",
]
checks = [
    "ruff>=0.0.237",
    "safety>=2",
    "mypy>=0.910",
    "types-markdown>=3.3",
    "types-toml>=0.10",
    "nptyping>=2.4.1"
]
tests = [
    "pytest>=6.2",
    "pytest-cov>=3.0",
    "pytest-randomly>=3.10",
    "pytest-xdist>=2.4",
    "nptyping>=2.4.1"
]
changelog = [
    "git-changelog>=1.0.0",
]
release = [
    "twine>=4.0.0",
]

[tool.black]
line-length = 120
extend-exclude = "(tests/fixtures|docs/generated)"
skip-string-normalization = true

[tool.ruff]
select = ["C", "E", "F", "W", "B", "I", "D", "N", "UP", "YTT", "ANN", "S",
"BLE", "A", "COM", "C4", "DTZ", "T10", "EM", "EXE", "ISC", "ICN", "G",
"INP", "PIE", "T20", "PT", "Q", "RET501", "RET502", "RET503", "SIM",
"PTH", "PD", "PGH", "PL", "TRY", "RUF", "PLE", "PLR", "PLW", "TRY", "RUF"]
ignore = ["D202", "N806", "N803", "S101", "INP001", "Q000", "TRY002", "PLR0913", "EXE001", "EXE002"]
fix = true
fixable = ["C", "E", "F", "W", "B", "I", "D", "N", "UP", "YTT", "ANN", "S",
"BLE", "A", "COM", "C4", "DTZ", "T10", "EM", "EXE", "ISC", "ICN", "G",
"INP", "PIE", "T20", "PT", "Q", "RET501", "RET502", "RET503", "SIM",
"PTH", "PD", "PGH", "PL", "TRY", "RUF", "PLE", "PLR", "PLW", "TRY", "RUF"]
extend-exclude = ["docs/generated"]
force-exclude = true
line-length = 120
target-version = "py310"

[tool.ruff.per-file-ignores]
"docs/examples/*" = ["ANN", "D"]
"docs/generated/*" = ["ANN", "D"]
"test_*" = ["ANN"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.mypy]
ignore_missing_imports = true
exclude = ["tests/fixtures/", "docs/examples/", "docs/generated/"]
warn_unused_ignores = true
show_error_codes = true

[tool.pytest.ini_options]
python_files = ["test_*.py"]
addopts = "--cov"
testpaths = ["tests"]

[tool.coverage.run]
branch = true
parallel = true
source = ["src", "tests"]

[tool.coverage.paths]
equivalent = ["src", "__pypackages__"]

[tool.coverage.report]
precision = 2
omit = ["src/*/__init__.py", "tests/__init__.py"]

[tool.coverage.json]
output = "htmlcov/coverage.json"
